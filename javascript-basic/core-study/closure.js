/**
 * 클로저란??
 * ex) setTimeout 메소드는 첫 번째 인자로 비동기 콜백함수, 두번째 인자로 실행할 시간을 받는 함수이다.ㄴ
 */
for(var i = 0; i < 100; i++) {
    setTimeout(() => console.log(i), i * 100);
}
/**
 * 위의 예제는 100이라는 결과가 100번 출력된다.
 * 그 이유는 timeout의 시간이 점차 늘어나기 때문애, 비동기 콜백 함수가 실행 될때는, i가 100이 되어 반복문이 종료되서이다.
 * 
 * setTimeout과 같은 비동기 작업은, 콜스택이 아닌 이벤트 큐에 저장해 놓는다. 그 후 이벤트루프가 콜스택이 비어있는 순간에 이벤트 큐에 쌓여있던 작업을 push하여
 * 콜백함수를 실행시켜준다. 위의 예에서는 콜백함수를 실행하는 시점에, i는 이미 100이 되어있기 때문에 0이 아니라 100이 출력된다.
 */

for(var i = 0; i < 100; i++) {
    function call(j) {
        setTimeout(() => console.log(j), j * 100);
    }
    call(i);
}

/**
 * 변수의 정적 유효범위를 활용하여 비동기 함수 안에서 처리할 변수의 값을 함수로 감싸준다. 그러면 i 값이 100이 되더라도 비동기 함수안에서 사용하는 j값은 고정되어 변하지 않는다.
 * 마치 함수로 변수를 고정한다고 하여 이를 클로져라고 한다.
 * 위와 같이 클로져를 이용한 해결법 이외에도 var가 아닌, 아래와 같이 let 키워드를 사용하여 새로운 렉시컬 환경을 생성해서 해결하기도 한다. 그렇게 하면 i값을 기억하기 때문에 올바른 결과 값을 가져올 수 있다.
 */